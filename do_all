#!/bin/bash

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

if [ "$SCRIPTPATH" == '.' ]
then
	SCRIPTPATH=$(dirname "$BASH_SOURCE")
fi

if [ $1 == "--help" ];
then
    echo -e "Preparing Cluster node"
	echo -e "\n\nPrereq:\n\nFirst master of cluster must have accesible dns name master-01, for high availability loadbalancer with accesible dns name LoadBalancer must exist\n\n"
    echo -e "\n\nUsage:"
    echo -e "\n    ./do_all -s [joining token] -i [ip of machine] -n [ip of loadbalancer] -m[/w] -l -c -b"
	echo -e "\n\nOptions:"
	echo -e "\n    -s    token for joining cluster (or for other nodes to join if this node is first master, aka boss)    default value: 'SECRET'"
	echo -e "\n    -i    ip of machine, is important if cannot be simply detected by programm (ip must be accesible from other nodes of cluster at least on 6443 and 10250 ports)    default value: is defined through ipconfig.exe -> Wireless LAN adapter Wi-Fi if wsl, through ip a show eth0 otherwise"
	echo -e "\n    -n    ip of loadbalancer (nessesary only if this is first node in cluster for adding ip of LB to cluster TLS cert)    default value: same as ip of machine"
	echo -e "\n    -m    join node as master (controlplane)    default value: node type is worker"
	echo -e "\n    -w    join node as worker (cannot be specified with -m option)    default value: node type is worker"
	echo -e "\n    -l    run cluster loadbalancer on this node    default value: false"
	echo -e "\n    -c    make all nessesary files executable (jic)    default value: false"
	echo -e "\n    -b    make node first in cluster (aka boss, only valid with -m flag)    default value: false"
	
    exit 0
fi

is_loadbalancer=false
is_worker=true
is_boss=false
secret_key=SECRET
need_chmod=false

ip_lb=$(if command -v ipconfig.exe &> /dev/null; then ipconfig.exe | grep "Wireless LAN adapter Wi-Fi" -A 6 | grep "IPv4 Address" | awk -F ': ' '{print $2}'; else ip a show eth0 | grep "inet " | awk '{print $2}' | cut -d / -f1; fi)
ip_self=$(if command -v ipconfig.exe &> /dev/null; then ipconfig.exe | grep "Wireless LAN adapter Wi-Fi" -A 6 | grep "IPv4 Address" | awk -F ': ' '{print $2}'; else ip a show eth0 | grep "inet " | awk '{print $2}' | cut -d / -f1; fi)

req_flag=0

options=":s:i:n:mwlcb"
while getopts $options opt
do
        case $opt in
                s) secret_key=$OPTARG ;;
				i) ip_self=$OPTARG ;;
				n) ip_lb=$OPTARG ;;
                m) is_worker=false; req_flag=$((req_flag+1)) ;;
                w) is_worker=true; req_flag=$((req_flag+1)) ;;
				l) is_loadbalancer=true ;;
				c) need_chmod=true ;;
				b) is_boss=true ;;
                \? ) echo "Use ./unicrypt --help to show help."; echo "Unknown option: -$OPTARG" >&2; exit 1;;
                :  ) echo "Use ./unicrypt --help to show help."; echo "Missing option argument for -$OPTARG" >&2; exit 1;;
                *  ) echo "Use ./unicrypt --help to show help."; echo "Unimplemented option: -$opt" >&2; exit 1;;
        esac
done

if [ $req_flag -gt 1 ]
then
    echo "Too many flags" >&2; exit 1;
fi

if $need_chmod
then
    sudo chmod u+x "$SCRIPTPATH/boss.sh"
	sudo chmod u+x "$SCRIPTPATH/master.sh"
	sudo chmod u+x "$SCRIPTPATH/master_finish.sh"
	sudo chmod u+x "$SCRIPTPATH/worker.sh"
	sudo chmod u+x "$SCRIPTPATH/lb.sh"
fi

if $is_loadbalancer
then
    bash "$SCRIPTPATH"/lb.sh 
fi

if $is_worker
then
    bash "$SCRIPTPATH"/worker.sh "$ip_self" "$secret_key"
else
    if $is_boss
	then
	    bash "$SCRIPTPATH"/boss.sh "$ip_self" "$ip_lb" "$secret_key"
	else
	    bash "$SCRIPTPATH"/master.sh "$ip_self" "$secret_key"
	fi
	bash "$SCRIPTPATH"/master_finish.sh
fi
